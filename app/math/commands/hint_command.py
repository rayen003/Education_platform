"""
Math Hint Command.

This module contains the command for generating progressive hints
for math problems.
"""

import logging
import json
import traceback
from typing import Dict, Any, List, Optional
from datetime import datetime

from app.math.services.llm.base_service import BaseLLMService

logger = logging.getLogger(__name__)

class MathGenerateHintCommand:
    """Command for generating progressive hints for math problems."""
    
    def __init__(self, agent):
        """
        Initialize the hint command.
        
        Args:
            agent: The agent instance that will use this command
        """
        self.agent = agent
        self.llm_service = agent.llm_service
        self.meta_agent = agent.meta_agent
        logger.info("Initialized MathGenerateHintCommand")

    def _execute_core(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate a progressive hint for the current problem.
        
        Args:
            state: The current state containing the problem and student's progress
            
        Returns:
            Updated state with generated hint
        """
        try:
            # Get the problem and previous hints
            problem = state.get("question", "")
            previous_hints = state.get("previous_hints", [])
            
            # Prepare the system prompt
            system_prompt = """
            You are a math tutor helping a student solve a problem.
            Generate a progressive hint that guides the student towards the solution
            without giving away the answer. Consider any previous hints that were given.
            """
            
            # Prepare the user prompt
            user_prompt = f"""
            Problem: {problem}
            Previous hints: {', '.join(previous_hints) if previous_hints else 'None'}
            Generate a helpful hint:
            """
            
            # Generate the hint using the LLM service
            response = self.llm_service.generate_completion(
                system_prompt,
                user_prompt,
                temperature=0.3,
                max_tokens=100
            )
            
            # Extract and verify the hint
            hint = response.get("content", "").strip()
            if hint:
                # Add the hint to the state
                state["hint"] = hint
                if "previous_hints" not in state:
                    state["previous_hints"] = []
                state["previous_hints"].append(hint)
                
                # Verify the hint quality
                verification_result = self.meta_agent.verify_hint(problem, hint)
                if verification_result.get("verified", False):
                    logger.info(f"Hint generated successfully: {hint}")
                    return state
                else:
                    logger.warning(f"Hint verification failed: {verification_result.get('reason', 'Unknown')}")
                    return state
            else:
                logger.warning("No hint generated by LLM")
                return state
        except Exception as e:
            logger.error(f"Error generating hint: {e}")
            return state

    def _record_event(self, state: Dict[str, Any], event_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Record an event for the hint generation.
        
        Args:
            state: The current state
            event_data: Data about the event
            
        Returns:
            The updated state
        """
        logger.info(f"Hint command event: {event_data}")
        
        # Add event to state if tracking events
        if "events" not in state:
            state["events"] = []
        
        event = {
            "type": "hint_generated",
            "timestamp": str(datetime.now()),
            "data": event_data
        }
        
        state["events"].append(event)
        
        return state
