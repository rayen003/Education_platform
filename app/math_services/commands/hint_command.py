"""
Math Hint Command.

This module contains the command for generating progressive hints
for math problems.
"""

import logging
import json
import traceback
from typing import Dict, Any, List, Optional
from datetime import datetime

from app.math.services.llm.base_service import BaseLLMService

logger = logging.getLogger(__name__)

class MathGenerateHintCommand:
    """Command for generating progressive hints for math problems."""
    
    def __init__(self, agent):
        """
        Initialize the hint command.
        
        Args:
            agent: The agent instance that will use this command
        """
        self.agent = agent
        self.llm_service = agent.llm_service
        self.meta_agent = agent.meta_agent
        logger.info("Initialized MathGenerateHintCommand")

    def _execute_core(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """
        Generate a hint for the student.
        
        Args:
            state: The current state dictionary
            
        Returns:
            Updated state with hint
        """
        logger.info("Generating hint")
        
        try:
            # Get the problem and previous hints
            problem = state.get("question", "")
            student_answer = state.get("student_answer", "")
            previous_hints = state.get("previous_hints", [])
            
            # Log inputs for debugging
            logger.info(f"Problem: {problem}")
            logger.info(f"Student answer: {student_answer}")
            logger.info(f"Previous hints: {previous_hints}")
            
            # Simple validation - if no problem is provided, return an error
            if not problem:
                logger.error("No problem provided")
                state["hint"] = "Please provide a math problem to get help."
                return state
            
            # Prepare the system prompt
            system_prompt = """
            You are a math tutor helping a student solve a problem.
            
            If the student's answer is correct, acknowledge this and provide positive reinforcement.
            
            If the student's answer is incorrect or incomplete, provide a helpful hint that guides 
            them toward the correct solution without giving away the complete answer.
            
            Keep your response concise and focused on the specific problem.
            """
            
            # Prepare the user prompt
            user_prompt = f"""
            Problem: {problem}
            Student's answer: {student_answer}
            
            Previous hints: {', '.join(previous_hints) if previous_hints else 'None'}
            
            Provide appropriate feedback or a hint:
            """
            
            # Generate the hint using the LLM service
            response = self.llm_service.generate_completion(
                system_prompt,
                user_prompt,
                temperature=0.3,
                max_tokens=100
            )
            
            # Extract the hint content from the response
            hint = response.get("content", "").strip()
            
            # Log only the content, not the entire response object
            logger.info(f"Generated hint: {hint}")
            
            # Add the hint to the state
            if hint:
                if "hints" not in state:
                    state["hints"] = []
                state["hints"].append(hint)
                
                # Also store as current hint and in previous_hints for backward compatibility
                state["hint"] = hint
                if "previous_hints" not in state:
                    state["previous_hints"] = []
                state["previous_hints"].append(hint)
                
                # Verify the hint quality if meta_agent is available
                if hasattr(self, 'meta_agent') and self.meta_agent:
                    try:
                        verification_result = self.meta_agent.verify_hint(problem, hint)
                        # Store verification result in state
                        state["hint_verification"] = verification_result
                        logger.info(f"Hint verification result: {verification_result}")
                    except Exception as e:
                        logger.warning(f"Hint verification failed with error: {e}")
                        # Create a default verification result
                        state["hint_verification"] = {
                            "verified": True,
                            "confidence": 0.7,
                            "reason": f"Verification error: {str(e)}"
                        }
                
                return state
            else:
                logger.warning("No hint generated by LLM")
                # Add a default hint if none was generated
                default_hint = "Try breaking down the problem into smaller steps and identifying the key concepts needed."
                if "hints" not in state:
                    state["hints"] = []
                state["hints"].append(default_hint)
                state["hint"] = default_hint
                return state
        except Exception as e:
            logger.error(f"Error generating hint: {e}")
            # Add a fallback hint in case of errors
            fallback_hint = "I'm having trouble generating a specific hint. Try reviewing the problem statement carefully."
            if "hints" not in state:
                state["hints"] = []
            state["hints"].append(fallback_hint)
            state["hint"] = fallback_hint
            return state

    def _record_event(self, state: Dict[str, Any], event_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        Record an event for the hint generation.
        
        Args:
            state: The current state
            event_data: Data about the event
            
        Returns:
            The updated state
        """
        logger.info(f"Hint command event: {event_data}")
        
        # Add event to state if tracking events
        if "events" not in state:
            state["events"] = []
        
        event = {
            "type": "hint_generated",
            "timestamp": str(datetime.now()),
            "data": event_data
        }
        
        state["events"].append(event)
        
        return state
